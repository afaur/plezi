{"name":"Plezi","tagline":"A small, pure Ruby, web framework-server with native support for Websockets, RESTful routing and HTTP streaming.","body":"# [Plezi](https://github.com/boazsegev/plezi), The Ruby framework for realtime web-apps\r\n[![Gem Version](https://badge.fury.io/rb/plezi.svg)](http://badge.fury.io/rb/plezi)\r\n[![Inline docs](http://inch-ci.org/github/boazsegev/plezi.svg?branch=master)](http://www.rubydoc.info/github/boazsegev/plezi/master)\r\n\r\nPlezi is an easy to use Ruby Websocket Framework, with full RESTful routing support and HTTP streaming support. It's name comes from the word \"fun\", or \"pleasure\", since Plezi is a pleasure to work with.\r\n\r\nWith Plezi, you can easily:\r\n\r\n1. Add Websocket services and RESTful HTTP Streaming to your existing Web-App, (Rails/Sinatra or any other Rack based Ruby app).\r\n\r\n2. Create an easily scalable backend for your SPA.\r\n\r\n3. Create a full fledged Ruby web application, taking full advantage of RESTful routing, HTTP streaming and scalable Websocket features.\r\n\r\nPlezi leverages [GRHttp server's](https://github.com/boazsegev/GRHttp) new architecture. GRHttp is a pure Ruby HTTP and Websocket Generic Server built using [GReactor](https://github.com/boazsegev/GReactor) - a multi-threaded pure ruby alternative to EventMachine with basic process forking support (enjoy forking, if your code is scaling ready).\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'plezi'\r\n```\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install plezi\r\n\r\n## Creating a Plezi Application\r\n\r\nto create a new barebones app using the Plezi framework, run from terminal:\r\n\r\n    $ plezi new appname\r\n\r\nThat's it, now you have a ready to use basic web server (with some demo code, such as a websocket chatroom).\r\n\r\nIf you're on MacOS or linux you can simply double click the `appname` script file in the `appname` folder. Or, from the terminal, you can type:\r\n\r\n    $ cd appname\r\n    $ ./appname # ( or: plezi s )\r\n\r\nnow go, in your browser, to: [http://localhost:3000/](http://localhost:3000/)\r\n\r\nthe default first port for the app is 3000. you can set the first port to listen to by using the `-p ` option (make sure you have permissions for the requested port):\r\n\r\n    $ ./appname -p 80\r\n\r\nyou now have a smart framework app that will happily assimilate any gem you feed it. it responds extra well to Haml, Sass and Coffee-Script, which you can enable in it's Gemfile.\r\n\r\n## Plezi Controller classes\r\n\r\nOne of the best things about the Plezi is it's ability to take in any class as a controller class and route to the classes methods with special support for RESTful methods (`index`, `show`, `new`, `save`, `update`, `delete`, `before` and `after`) and for WebSockets (`pre_connect`, `on_open`, `on_message(data)`, `on_close`, `broadcast`, `unicast`, `multicast`, `on_broadcast(data)`).\r\n\r\nHere is a Hello World using a Controller class (run in `irb`):\r\n\r\n        require 'plezi'\r\n\r\n        class Controller\r\n            def index\r\n                \"Hello World!\"\r\n            end\r\n        end\r\n\r\n        listen\r\n        route '*' , Controller\r\n\r\n        exit # Plezi will autostart once you exit irb.\r\n\r\nExcept while using WebSockets, returning a String will automatically add the string to the response before sending the response - which makes for cleaner code. It's also possible to use the `response` object to set the response or stream HTTP (return true instead of a stream when you're done).\r\n\r\nIt's also possible to define a number of controllers for a similar route. The controllers will answer in the order in which the routes are defined (this allows to group code by logic instead of url).\r\n\r\n\\* please read the demo code for Plezi::StubRESTCtrl and Plezi::StubWSCtrl to learn more. Also, read more about the [GRHttp Websocket and HTTP server](https://github.com/boazsegev/GRHttp) at the core of Plezi to get more information about the amazing [HTTPRequest](http://www.rubydoc.info/github/boazsegev/GRHttp/master/GRHttp/HTTPRequest) and [HTTPResponse](http://www.rubydoc.info/github/boazsegev/GRHttp/master/GRHttp/HTTPResponse) objects.\r\n\r\n## Native Websocket and Redis support\r\n\r\nPlezi Controllers have access to native websocket support through the `pre_connect`, `on_open`, `on_message(data)`, `on_close`, `broadcast` and `unicast` methods.\r\n\r\nHere is some demo code for a simple Websocket broadcasting server, where messages sent to the server will be broadcasted back to all the **other** active connections (the connection sending the message will not recieve the broadcast).\r\n\r\nAs a client side, we will use the WebSockets echo demo page - we will simply put in ws://localhost:3000/ as the server, instead of the default websocket server (ws://echo.websocket.org).\r\n\r\nRemember to connect to the service from at least two browser windows - to truly experience the `broadcast`ed websocket messages.\r\n\r\n```ruby\r\n    require 'plezi'\r\n\r\n    # do you need automated redis support?\r\n    # require 'redis'\r\n    # ENV['PL_REDIS_URL'] = \"redis://user:password@localhost:6379\"\r\n\r\n    class BroadcastCtrl\r\n        def index\r\n            redirect_to 'http://www.websocket.org/echo.html'\r\n        end\r\n        def on_message data\r\n            # try replacing the following two lines are with:\r\n            # self.class.broadcast :_send_message, data\r\n            broadcast :_send_message, data\r\n            response << \"sent.\"\r\n        end\r\n        def _send_message data\r\n            response << data\r\n        end\r\n        def hello\r\n            'Hello!'\r\n        end\r\n        def_special_method \"humans.txt\" do\r\n            'I made this :)'\r\n        end\r\n    end\r\n\r\n    listen \r\n\r\n    route '/', BroadcastCtrl\r\n```\r\n\r\nmethod names starting with an underscore ('_') will NOT be made public by the router: so while both '/hello' and '/humans.txt' are public ( [try it](http://localhost:3000/humans.txt) ), '/_send_message' will return a 404 not found error ( [try it](http://localhost:3000/_send_message) ).\r\n\r\n## Adding Websockets to your existing Rails/Sinatra/Rack application\r\n\r\nYou already have an amazing WebApp, but now you want to add websocket broadcasting and unicasting support - Plezi makes connecting your existing WebApp with your Plezi Websocket backend as easy as it gets.\r\n\r\n\r\nThere are two easy ways to add Plezi websockets to your existing WebApp, depending on your needs and preferences:\r\n\r\n1. **The super easy way - a Hybrid app**:\r\n\r\n     Plezi plays well with others, so you can add Plezi to your existing framework and let it catch any incoming websocket connections. Your application will still handle anything you didn't ask Plezi to handle (Plezi Websockets and routes will recieve priority, so your app can keep handling the 404 response).\r\n\r\n\r\n2. **The Placebo API**:\r\n\r\n     Plezi has a Placebo API, allowing you to add Plezi features without running a Plezi app.\r\n\r\n     By adding the Plezi Placebo to your app, you can easily communicate between your existing app and a remote Plezi process/server. So, although websocket connections are made to a different server, your app can still send and recieve data through the websocket connection (using Redis).\r\n\r\n### The super easy way - a Hybrid app\r\n\r\nThe easiest way to add Plezi websockets to your existing application is to use [GRHttp's](https://github.com/boazsegev/GRHttp) Rack adapter to run your Rack app, while Plezi will use GRHttp's native features (such as Websockets and HTTP streaming).\r\n\r\nYou can eaither use your existing Plezi application or create a new mini plezi application inside your existing app folder using:\r\n\r\n    $   plezi mini appname\r\n\r\nNext, add the `plezi` gem to your `Gemfile` and add the following line somewhere in your apps code:\r\n\r\n```ruby\r\nrequire './appname/appname.rb'\r\nPlezi.start_rack\r\n```\r\n\r\nThat's it! Now you can use the Plezi API and your existing application's API at the same time and they are both running on the same server.\r\n\r\nPlezi's routes will be attempted first, so that your app can keep handling the 404 (not found) error page.\r\n\r\n### The Plezi Placebo API - talking from afar\r\n\r\nTo use Plezi and your App on different processes, without mixing them together, simply include the Plezi App in your existing app and call `Plezi.start_placebo` - now you can access all the websocket API that you want from your existing WebApp, but Plezi will not interfere with your WebApp in any way.\r\n\r\nFor instance, add the following code to your environment setup on a Rails or Sinatra app:\r\n\r\n```ruby\r\n\r\nrequire './my_plezi_app/environment.rb'\r\nrequire './my_plezi_app/routes.rb'\r\n\r\n# # Make sure the following is already in your 'my_plezi_app/environment.rb' file:\r\n# ENV['PL_REDIS_URL'] = \"redis://username:password@my.host:6379\"\r\n\r\nPlezi.start_placebo\r\n```\r\n\r\nThat's it!\r\n\r\nPlezi will automatically set up the Redis connections and pub/sub to connect your existing WebApp with Plezi's Websocket backend - which you can safely scale over processes or machines.\r\n\r\nNow you can use Plezi from withing your existing App's code. For example, if your Plezi app has a controller named `ClientPleziCtrl`, you might use:\r\n\r\n```ruby\r\n# Demo a Rails Controller:\r\nclass ClientsController < ApplicationController\r\n  def update\r\n     #... your original logic here\r\n     @client = Client.find(params[:id])\r\n\r\n     # now unicast data to your client on the websocket\r\n     # (assume his websocket uuid was saved in @client.ws_uuid)\r\n\r\n     ClientPleziCtrl.unicast @client.ws_uuid, :method_name, @client.attributes\r\n\r\n     # or broadcast data to your all your the clients currently connected\r\n\r\n     ClientPleziCtrl.broadcast :method_name, @client.attributes\r\n\r\n  end\r\nend\r\n```\r\n\r\nEasy.\r\n\r\n\\- \"But wait...\", you might say to me, \"How do we get information back FROM the back end?\"\r\n\r\nOh, that's easy too.\r\n\r\nWith a few more lines of code, we can have the websocket connections _broadcast_ back to us using the `Plezi::Placebo` API.\r\n\r\nIn your Rails app, add the logic:\r\n\r\n```ruby\r\nclass MyReciever\r\n    def my_reciever_method arg1, arg2, arg3, arg4...\r\n        # your app's logic\r\n    end\r\nend\r\nPlezi::Placebo.new MyReciever\r\n```\r\n\r\nPlezi will now take your class and add mimick an IO connection (the Placebo connection) on it's GRHttp serever. This Placebo connection will answer the Redis broadcasts just as if your class was a websocket controller...\r\n\r\nOn the Plezi side, use multicasting or unicasting (but not broadcasting), from ANY controller:\r\n\r\n```ruby\r\n\r\nclass ClientPleziCtrl\r\n    def on_message data\r\n        # app logic here\r\n        multicast :my_reciever_method, arg1, arg2, arg3, arg4...\r\n    end\r\nend\r\n```\r\n\r\nThat's it! Now you have your listening object... but be aware - to safely scale up this communication you might consider using unicasting instead of broadcasting.\r\n\r\nWe recommend saving the uuid of the Rails process to a Redis key and picking it up from there.\r\n\r\nOn your Rails app, add:\r\n\r\n```ruby\r\n#...\r\nclass MyReciever\r\n    def my_reciever_method arg1, arg2, arg3, arg4...\r\n        # ...\r\n    end\r\nend\r\n\r\npl = Plezi::Placebo.new MyReciever\r\n\r\nPlezi.redis_connection.set 'MainUUIDs', pl.uuid\r\n\r\n```\r\nIn your Plezi app, use unicasting when possible:\r\n\r\n```ruby\r\nclass ClientPleziCtrl\r\n    def on_message data\r\n        # app logic here\r\n        main_uuid = Plezi.redis_connection.get 'MainUUIDs'\r\n        unicast main_uuid, :my_reciever_method, arg1, arg2, arg3, arg4... if main_uuid\r\n    end\r\nend\r\n\r\n```\r\n\r\n## Native HTTP streaming with Asynchronous events\r\n\r\nPlezi comes with native HTTP streaming support, alowing you to use Plezi Events and Timers to send an Asynchronous response.\r\n\r\nLet's make the classic 'Hello World' use HTTP Streaming:\r\n\r\n```ruby\r\n        require 'plezi'\r\n\r\n        class Controller\r\n            def index\r\n                response.stream_async do\r\n                    sleep 0.5\r\n                    response << \"Hello \";\r\n                    response.stream_async{ sleep 0.5; response << \"World\" }\r\n                end\r\n                true\r\n            end\r\n        end\r\n\r\n        listen\r\n        route '*' , Controller\r\n```\r\n\r\nNotice you can nest calls to the `response.stream_async` method, allowing you to breakdown big blocking tasks into smaller chunks. `response.stream_async` will return immediately, scheduling the task for background processing.\r\n\r\nYou can also handle other tasks asynchronously using the [GReactor API](http://www.rubydoc.info/gems/greactor)'s.\r\n\r\nMore on asynchronous events and timers later.\r\n\r\n## Plezi Routes\r\n\r\nPlezi supports magic routes, in similar formats found in other systems, such as: `route \"/:required/(:optional_with_format){[\\\\d]*}/(:optional)\", Plezi::StubRESTCtrl`.\r\n\r\nPlezi assummes all simple routes to be RESTful routes with the parameter `:id` ( `\"/user\" == \"/user/(:id)\"` ).\r\n\r\n    require 'plezi'\r\n    listen\r\n\r\n    # this route demos a route for listing/showing posts,\r\n    # with or without revision numbers or page-control....\r\n    # notice the single quotes (otherwise the '\\' would need to be escaped).\r\n    route '/post/(:id)/(:revision){[\\d]+\\.[\\d]+}/(:page_number)', Plezi::StubRESTCtrl\r\n\r\nnow visit:\r\n\r\n* [http://localhost:3000/post/12/1.3/1](http://localhost:3000/post/12/1.3/1)\r\n* [http://localhost:3000/post/12/1](http://localhost:3000/post/12/1)\r\n\r\n**please see the `route` documentation for more information on routes**.\r\n\r\n## Plezi Virtual Hosts\r\n\r\nPlezi can be used to create virtual hosts for the same service, allowing you to handle different domains and subdomains with one app:\r\n\r\n    require 'plezi'\r\n    listen\r\n    host 'localhost', alias: 'localhost2'\r\n\r\n    shared_route '/humans.txt' do |req, res|\r\n        res << \"we are people - shared by all routes.\"\r\n    end\r\n\r\n    host\r\n\r\n    route('*') do |req, res|\r\n        res << \"this is a 'catch-all' host. you got here by putting in the IP adderess.\"\r\n    end\r\n\r\n    host 'localhost'\r\n\r\n    route('*') do |req, res|\r\n        res << \"this is localhost or localhost 2\"\r\n    end\r\n\r\nNow visit:\r\n\r\n* [http://127.0.0.1:3000/]( http://127.0.0.1:3000/ )\r\n* [http://localhost:3000/]( http://localhost:3000/ )\r\n* [http://127.0.0.1:3000/humans.txt]( http://127.0.0.1:3000/humans.txt )\r\n* [http://localhost:3000/humans.txt]( http://localhost:3000/humans.txt )\r\n\r\n## Plezi Logging\r\n\r\nThe Plezi module (also `PL`) delegates to the GReactor methods, helping with logging as well as the support you already noticed for dynamic routes, dynamic services and more.\r\n\r\nLogging:\r\n\r\n    require 'plezi'\r\n\r\n    # simple logging of strings\r\n    PL.info 'log info'\r\n    GReactor.info 'This is the same, but more direct.'\r\n    PL.warn 'log warning'\r\n    PL.error 'log error'\r\n    PL.fatal \"log a fatal error (shuoldn't be needed).\"\r\n    PL.log_raw \"Write raw strings to the logger.\"\r\n\r\n    # the logger accepts exceptions as well.\r\n    begin\r\n        raise \"hell\"\r\n    rescue Exception => e\r\n        PL.error e\r\n    end\r\n\r\nPlease notice it is faster to use the GReactor API directly when using API that is delegated to GReactor.\r\n\r\n## Plezi Events and Timers\r\n\r\nThe Plezi module (also `PL`) also delegates to the [GReactor's API](http://www.rubydoc.info/gems/greactor/GReactor) to help with asynchronous tasking, callbacks, timers and customized shutdown cleanup.\r\n\r\nAsynchronous callbacks (works only while services are active and running):\r\n\r\n    require 'plezi'\r\n\r\n    def my_shutdown_proc time_start\r\n        puts \"Services were running for #{Time.now - time_start} seconds.\"\r\n    end\r\n\r\n    # shutdown callbacks\r\n    GReactor.on_shutdown(Kernel, :my_shutdown_proc, Time.now) { puts \"this will run after shutdown.\" }\r\n    GReactor.on_shutdown() { puts \"this will run too.\" }\r\n\r\n    # a timer\r\n    GReactor.run_after 2, -> {puts \"this will wait 2 seconds to run... too late. for this example\"}\r\n\r\n    # an asynchronous method call with an optional callback block\r\n    GReactor.callback(Kernel, :puts, \"Plezi will start eating our code once we exit terminal.\") {puts 'first output finished'}\r\n\r\n    GReactor.run_async {puts \"notice that the background tasks will only start once the Plezi's engine is running.\"}\r\n    GReactor.run_async {puts \"exit Plezi to observe the shutdown callbacks.\"}\r\n\r\n## Re-write Routes\r\n\r\nPlezi supports special routes used to re-write the request and extract parameters for all future routes.\r\n\r\nThis allows you to create path prefixes which will be removed once their information is extracted.\r\n\r\nThis is great for setting global information such as internationalization (I18n) locales.\r\n\r\nBy using a route with the a 'false' controller, the parameters extracted are automatically retained.\r\n\r\n*(Older versions of Plezi allowed this behavior for all routes, but it was deprecated starting version 0.7.4).\r\n\r\n    require 'plezi'\r\n\r\n    class Controller\r\n        def index\r\n            return \"Bonjour le monde!\" if params[:locale] == 'fr'\r\n            \"Hello World!\\n #{params}\"\r\n        end\r\n        def show\r\n            return \"Vous êtes à la recherche d' : #{params[:id]}\" if params[:locale] == 'fr'\r\n            \"You're looking for: #{params[:id]}\"\r\n        end\r\n        def debug\r\n            # binding.pry\r\n            # do you use pry for debuging?\r\n            # no? oh well, let's ignore this.\r\n            false\r\n        end\r\n        def delete\r\n            return \"Mon Dieu! Mon français est mauvais!\" if params[:locale] == 'fr'\r\n            \"did you try #{request.base_url + request.original_path}?_method=delete or does your server support a native DELETE method?\"\r\n        end\r\n    end\r\n\r\n    listen\r\n\r\n    # this is our re-write route.\r\n    # it will extract the locale and re-write the request.\r\n    route '/:locale{fr|en}/*', false\r\n\r\n    # this route takes a regular expression that is a simple math calculation\r\n    # (calculator)\r\n    #\r\n    # it is an example for a Proc controller, which can replace the Class controller.\r\n    route /^\\/[\\d\\+\\-\\*\\/\\(\\)\\.]+$/ do |request, response|\r\n        message = (request.params[:locale] == 'fr') ? \"La solution est\" : \"My Answer is\"\r\n        response << \"#{message}: #{eval( request.path[1..-1] )}\"\r\n    end\r\n\r\n    route \"/users\" , Controller\r\n\r\n    route \"/\" , Controller\r\n\r\ntry:\r\n\r\n* [http://localhost:3000/](http://localhost:3000/)\r\n* [http://localhost:3000/fr](http://localhost:3000/fr)\r\n* [http://localhost:3000/users/hello](http://localhost:3000/users/hello)\r\n* [http://localhost:3000/users/(5+5*20-15)/9.0](http://localhost:3000/users/(5+5*20-15)/9.0)\r\n* [http://localhost:3000/(5+5*20-15)/9.0](http://localhost:3000/(5+5*20-15)/9)\r\n* [http://localhost:3000/fr/(5+5*20-15)/9.0](http://localhost:3000/fr/(5+5*20-15)/9)\r\n* [http://localhost:3000/users/hello?_method=delete](http://localhost:3000/users/hello?_method=delete)\r\n\r\nAs you can see in the example above, Plezi supports Proc routes as well as Class controller routes.\r\n\r\nPlease notice that there are some differences between the two. Proc routes less friedly, but plenty powerful and are great for custom 404 error handling.\r\n\r\n## OAuth2 and other Helpers\r\n\r\nPlezi has a few helpers that help with common tasks.\r\n\r\nFor instance, Plezi has a built in controller that allows you to add social authentication using Google, Facebook\r\nand and other OAuth2 authentication service. For example:\r\n\r\n    require 'plezi'\r\n\r\n    class Controller\r\n        def index\r\n            flash[:login] ? \"You are logged in as #{flash[:login]}\" : \"You aren't logged in. Please visit one of the following:\\n\\n* #{request.base_url}#{Plezi::OAuth2Ctrl.url_for :google}\\n\\n* #{request.base_url}#{Plezi::OAuth2Ctrl.url_for :facebook}\"\r\n        end\r\n    end\r\n\r\n    # set up the common social authentication variables for automatic Plezi::OAuth2Ctrl service recognition.\r\n    ENV[\"FB_APP_ID\"] ||= \"facebook_app_id / facebook_client_id\"\r\n    ENV[\"FB_APP_SECRET\"] ||= \"facebook_app_secret / facebook_client_secret\"\r\n    ENV['GOOGLE_APP_ID'] = \"google_app_id / google_client_id\"\r\n    ENV['GOOGLE_APP_SECRET'] = \"google_app_secret / google_client_secret\"\r\n\r\n    require 'plezi/oauth'\r\n\r\n    # manually setup any OAuth2 service (we'll re-setup facebook as an example):\r\n    Plezi::OAuth2Ctrl.register_service(:facebook, app_id: ENV['FB_APP_ID'],\r\n                    app_secret: ENV['FB_APP_SECRET'],\r\n                    auth_url: \"https://www.facebook.com/dialog/oauth\",\r\n                    token_url: \"https://graph.facebook.com/v2.3/oauth/access_token\",\r\n                    profile_url: \"https://graph.facebook.com/v2.3/me\",\r\n                    scope: \"public_profile,email\") if ENV['FB_APP_ID'] && ENV['FB_APP_SECRET']\r\n\r\n\r\n    listen\r\n\r\n    create_auth_shared_route do |service_name, token, remote_user_id, remote_user_email, remote_response|\r\n        # we will create a temporary cookie storing a login message. replace this code with your app's logic\r\n        flash[:login] = \"#{remote_response['name']} (#{remote_user_email}) from #{service_name}\"\r\n    end\r\n\r\n    route \"/\" , Controller\r\n\r\n    exit\r\n\r\nPlezi has a some more goodies under the hood.\r\n\r\nWhether such goodies are part of the Plezi-App Template (such as rake tasks for ActiveRecord without Rails) or part of the Plezi Framework core (such as descried in the Plezi::ControllerMagic documentation: #flash, #url_for, #render, #send_data, etc'), these goodies are fun to work with and make completion of common tasks a breeze.\r\n\r\n\r\n## Plezi Settings\r\n\r\nPlezi is meant to be very flexible. please take a look at the Plezi Module for settings you might want to play with (max_threads, idle_sleep, create_logger) or any monkey patching you might enjoy.\r\n\r\nFeel free to fork or contribute. right now I am one person, but together we can make something exciting that will help us enjoy Ruby in this brave new world and (hopefully) set an example that will induce progress in the popular mainstream frameworks such as Rails and Sinatra.\r\n\r\n## Contributing\r\n\r\n1. Fork it ( https://github.com/boazsegev/plezi/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create a new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}